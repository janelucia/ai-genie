"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from corsheaders.defaults import default_headers

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@&^mtteijse^@_8b*2@m@iyu*jd%0p&ewtb5&u78l!gz^ao&-c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CSRF_TRUSTED_ORIGINS = []
if os.getenv('BACKEND_NGROK_URL') and os.getenv('FRONTEND_NGROK_URL'):
    CSRF_TRUSTED_ORIGINS = [
        os.getenv('BACKEND_NGROK_URL'),  # Backend ngrok URL
        os.getenv('FRONTEND_NGROK_URL'),  # Frontend ngrok URL
    ]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "ngrok-skip-browser-warning",
]

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
]

if os.getenv('BACKEND_NGROK_URL'): # Backend ngrok URL without https:// part
    ALLOWED_HOSTS += [os.getenv('BACKEND_NGROK_URL')[8:]]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

if os.getenv('FRONTEND_NGROK_URL'): # Frontend ngrok URL
    CORS_ALLOWED_ORIGINS += [os.getenv('FRONTEND_NGROK_URL')]

# Application definition

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',    
    'drf_yasg',
    "corsheaders",
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

VECTOR_DATABASES = {
    # Default DB
    'default': {
        'ENGINE': 'milvus',
        'COLLECTION': 'research_papers',
        'TOKEN': "root:Milvus",
        'SOURCE': "http://localhost:19530"
    },
    # Linux DB
    'posix': {
        'ENGINE': 'milvus',
        'COLLECTION': 'research_papers',
        'TOKEN': "",
        'SOURCE': "vector_db.db"
    },
    # Windows DB
    'nt': {
        'ENGINE': 'milvus',
        'COLLECTION': 'research_papers',
        'TOKEN': "root:Milvus",
        'SOURCE': "http://localhost:19530"
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Database files
# https://docs.djangoproject.com/en/5.1/ref/models/fields/#django.db.models.FileField
print("BASE_DIR LOOKS LIKE: " + str(BASE_DIR))

MEDIA_URL = '/media/'  # URL prefix for media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'core', 'media')  # Root directory for media files

RESEARCH_FILES_DIR = os.path.join(MEDIA_ROOT, 'research_files')

# Ai models (llama for prod, gemma for testing without string gpu)
# AI_MODEL_NAME = "llama3.1"
AI_MODEL_NAME = "gemma3:1b"

# Email functionalisty
# https://www.geeksforgeeks.org/setup-sending-email-in-django-project/

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER') #sender's email-id
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') #password associated with above email-id (not the regular password)